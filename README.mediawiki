===description===
This is a rewrite of PHP/MYSQL mobile-first app for shared shopping lists. While I could certainly refactor that existing app into a MVC Agile test driven piece of clean code, I prefer to get some experience the Angular/NodeJS/Express/MongoDb stack. More importantly, I need to somehow shock my system into the paradigm of building an application by the iterative process of decribing a feature, writing a test for it that fails, writing code to implement a passing test, re-factor and loop.So far it is working and I see a future for this approach for all my code.

The basic architecture is to create a REST API that contains a good part of the business logic or MODEL of the system. The api communicates in JSON to a front end encapsulating the CONTROLLER and VIEW.

Currently hosted at parleyvale.com
test using mocha installed globally 

===using superagent and mocha for testing===
<pre>

  basic database tests
    ✓ if there are no lists for user it should be undefined
    ✓ should be undefined if lid doesnt match any list

  superagent:
    ✓ GET / should be running and return: please select...
    users
{ token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoidGltIn0.LmoK1Nr8uA4hrGr25L2AlKXs6U832Z_lE6JGznHJfFs' }
      ✓ POSTs succeeds for fake user for correct apikey
{ _id: '53a4bc0d5b48dc8e1f690dc4',
  apikey: 'Natacitipavuwunexelisaci',
  defaultList: 0,
  email: 'mckenna.tim@gmail.com',
  id: 1,
  lists: [ { lid: 'Jutebi', shops: 'groceries' } ],
  name: 'tim',
  role: 'admin',
  timestamp: 1404331409144 }
      ✓ GETs succeeds w userinfo from api/account when passed token
{ lid: 'Jutebi',
  shops: 'groceries',
  timestamp: 1404331409113,
  list:
   [ { product: 'banana', done: false, tags: [], amt: {} },
     { product: 'coffee', done: false, tags: [], amt: {} },
     { product: 'apples', done: true, tags: [Object], amt: [Object] },
     { product: 'milk', done: false, tags: [Object], amt: [Object] },
     { product: 'butter', done: false, tags: [], amt: {} },
     { product: 'teff flour', done: true, tags: [], amt: {} } ],
  stores: [ { id: 's_Bereti', name: 'Stop&Shop' } ],
  _id: '53a4bc0d5b48dc8e1f690dc8' }
      ✓ GETs succeeds api/lists/Jutebi when passed token
{ message: 'that is not one of your lists',
  lists: [ { lid: 'Jutebi', shops: 'groceries' } ] }
      ✓ GETs fails when api/lists/Jutebidog is not in user.lists w/token
{}
      ✓ GETs fails with 500 when api/lists/Jutebi i has a bad token
      ✓ DELs users/:name from users->success=1
      ✓ GETs {} if users/:tim7 doesnt exist
      ✓ GETs all users and counts em
{ message: ' available' }
      ✓ GETs isUser/:tim7 is available
[ { name: 'tim7',
    email: 'tim@sitebuilt.net',
    lists: [],
    role: 'user',
    timestamp: 1404331486688,
    apikey: 'Qemavohegoburuxosuqujoga',
    id: 5,
    _id: '53b465de2f45a3087abf66fd' } ]
      ✓ POSTs a new /user/:tim7 -> full array of objects
      ✓ GETs all users expecting the count to go up
      ✓ GETs a users/:tim7
{ id: 4,
  name: 'tim2',
  email: 'mckt_jp@yahoo.com',
  defaultList: 0,
  lists: [],
  role: 'user',
  timestamp: 1399208688,
  apikiey: 'Sobeqosevewacokejufozeki',
  _id: '53a4bc0d5b48dc8e1f690dc7' }
      ✓ GETs a users/id/:id
{ message: ' already registered' }
      ✓ GETs username is already registered for isUser/:tim7
11000
      ✓ rejects POST of duplicate user/:tim7 ->11000
{ lid: 'Jutebi', shops: 'groceries' }
      ✓ PUTs an existing :list on /users/:name/:listId->list
      ✓ rejects a PUT of new :list on /users->list already included
      ✓ reject a PUT of :list for user -> null list with that id
    lists
      ✓ POSTs (creates) a new list
      ✓ DELs a list by :lid
      ✓ PUTs updates /list timestamp
    authentication
{ token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoidGltIn0.LmoK1Nr8uA4hrGr25L2AlKXs6U832Z_lE6JGznHJfFs' }
      ✓ POSTs /authenticates w apikey and returns token
{ message: 'Authentication Error' }
      ✓ POSTs fails with error for fake user with wrong apikey
{ message: 'conflict' }
      ✓ gets a [conflict] to existing user and email
{ message: 'match' }
      ✓ gets a [match] to existing user and email
{ message: 'available', userRec: 'created', email: 'sent' }
      ✓ gets available -> posts/creates user expected to return user rec for [timz]
1
      ✓ DELs users/:name from users->success=1


  30 passing (172ms)
</pre>
===ToDo===
authentication
:[http://blog.auth0.com/2014/01/07/angularjs-authentication-with-cookies-vs-token/ angularjs-authentication-with-cookies-vs-token]
===using curl to access rest.api===
curl http://localhost:3020/users

curl http://localhost:3020/lists 

curl http://localhost:3020/users/5316023647c5a1f01716da94

curl -d '{"MyKey":"My Value"}' -H "Content-Type: application/json" http://localhost:3020/users

curl -d '{"name":"tim3", "email":"tim@sitebuilt.net"}' -H "Content-Type: application/json" http://localhost:3020/users

curl -X PUT http://localhost:3020/users/tim/5315545dafcb3c583086f86d
curl -X PUT http://localhost:3020/users/tim/5315545dafcb3c583086f868
curl -X PUT http://localhost:3020/users/tim/5315545dafcb3c583086f869
curl -X PUT http://localhost:3020/users/tim/slldsl4l5l6jkgkltl554

curl -d '{"name":"tim3", "email":"tim@sitebuilt.net", "lists":[]}' -H "Content-Type: application/json" http://localhost:3020/users

===test data===
<pre>
var products =[];
products.name = 'products';
products.items = [   
{lid:'1',product:'banana', done:false, tags:[]},
{lid:'4',product:'coffee', done:false, tags:[]},
{lid:'4',product:'brown sugar', done:false, tags:[]},
{lid:'4',product:'bacon', done:false, tags:[]},
{lid:'1',product:'apples', done:false, tags:[]},
{lid:'5',product:'2x4-8\'', done:false, tags:[]},
{lid:'0',product:'brown gravy', done:true, tags:[]},
{lid:'0',product:'bags', done:true, tags:[]},
{lid:'0',product:'applesauce', done:true, tags:[]},
{lid:'00',product:'sugar', done:true, tags:[]},
{lid:'0',product:'baby back ribs', done:true, tags:[]},
{lid:'1',product:'brown gravy', done:true, tags:[]},
{lid:'7',product:'bags', done:true, tags:[]},
{lid:'7',product:'applesauce', done:true},
{lid:'4',product:'sugar', done:true, tags:[]},
{lid:'1',product:'baby back ribs', done:true, tags:[]},
{lid:'4',product:'apple butter', done:true, tags:[]}
];

var lists =[];
lists.name = 'lists';
lists.items = [
{lid:'1', shops:'groceries'},
{lid:'2', shops:'hardware'},
{lid:'3', shops:'drugs'},
{lid:'4', shops:'groceries'},
{lid:'5', shops:'building'},
{lid:'6', shops:'garden'},
{lid:'7', shops:'groceries'},
{lid:'0', shops:'testShop'},
{lid:'00', shops:'testShop'}
];

var users = [];
users.name = 'users';
users.items= [
{name: 'tim', email: 'mckenna.tim@gmail.com', lists:[]},
{name: 'tim7', email: 'mckenna.tim@gmail.com', lists:[]},
{name: 'peri', email: 'perimckenna@gmail.com', lists:[]},
{name: 'tim2', email: 'mckt_jp@yahoo.com', lists:[]}
];

</pre>

===TDD===
http://wiki.sitebuilt.net/TDD
